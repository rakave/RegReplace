{
    "docs": [
        {
            "location": "/", 
            "text": "About RegReplace\n\ue157\n\n\nOverview\n\ue157\n\n\nRegReplace is a plugin for Sublime Text that allows the creating of commands consisting of sequences of find and replace instructions.\n\n\n\n\nFeatures\n\ue157\n\n\n\n\nCreate find and replace rules that can then be used to create Sublime Commands to call at any time.\n\n\nChain multiple regular expression find and replace rules together.\n\n\nCreate rules that can filter regular expression results by syntax scope.\n\n\nCreate rules that target specific scopes and apply regular expression to the content.\n\n\nCreate commands that highlight results and requiring confirmation before replacing.\n\n\nCreate find and fold/unfold commands to fold or unfold the find results instead of replacing them.\n\n\nCreate find and mark/unmark commands to simply highlight or un-highlight results instead of replacing them.\n\n\nCreate advanced commands that can run a plugin to do more complex replaces.", 
            "title": "About RegReplace"
        }, 
        {
            "location": "/#about-regreplace", 
            "text": "", 
            "title": "About RegReplace"
        }, 
        {
            "location": "/#overview", 
            "text": "RegReplace is a plugin for Sublime Text that allows the creating of commands consisting of sequences of find and replace instructions.", 
            "title": "Overview"
        }, 
        {
            "location": "/#features", 
            "text": "Create find and replace rules that can then be used to create Sublime Commands to call at any time.  Chain multiple regular expression find and replace rules together.  Create rules that can filter regular expression results by syntax scope.  Create rules that target specific scopes and apply regular expression to the content.  Create commands that highlight results and requiring confirmation before replacing.  Create find and fold/unfold commands to fold or unfold the find results instead of replacing them.  Create find and mark/unmark commands to simply highlight or un-highlight results instead of replacing them.  Create advanced commands that can run a plugin to do more complex replaces.", 
            "title": "Features"
        }, 
        {
            "location": "/installation/", 
            "text": "Installation\n\ue157\n\n\nPackage Control\n\ue157\n\n\nThe recommended way to install RegReplace is via \nPackage Control\n.  Package Control will install the correct branch on your system and keep it up to date.\n\n\n\n\n\n\nEnsure Package Control is installed.  Instructions are found \nhere\n.\n\n\n\n\n\n\nIn Sublime Text, press \nctrl\n + \nshift\n + \np\n (Win, Linux) or \ncmd\n + \nshift\n + \np\n (OSX) to bring up the quick panel and start typing \nPackage Control: Install Package\n.  Select the command and it will show a list of installable plugins.\n\n\n\n\n\n\nStart typing \nRegReplace\n; when you see it, select it.\n\n\n\n\n\n\nRestart to be sure everything is loaded proper.\n\n\n\n\n\n\nEnjoy!\n\n\n\n\n\n\nManual Installation\n\ue157\n\n\n\n\nWarning\n\n\nThis is not the recommended way to install RegReplace for the average user.  Installing this way \nwill not\n get automatically updated.\n\n\nIf you are forking for a pull request, you should \njust\n clone RegReplace and run Package Control's \nSatisfy Dependency\n command to get all the dependencies.\n\n\n\n\nFor those who want to install RegReplace without package control, here are the steps.  It understood that some people for what ever reason will prefer manually and may even have legitimate reasons to do so.  When going this route, you will have to keep all the packages updated yourself.\n\n\n\n\n\n\n\n\nDownload the latest releases of the following dependencies and unpack or git clone in the \nPackages\n folder as shown below:\n\n\n\n\nhttps://bitbucket.org/teddy_beer_maniac/sublime-text-dependency-markupsafe\n -\n markupsafe\n\n\nhttps://bitbucket.org/teddy_beer_maniac/sublime-text-dependency-jinja2\n -\n python-jinja2\n\n\nhttps://github.com/packagecontrol/pygments\n -\n pygments\n\n\nhttps://github.com/facelessuser/sublime-markdown-popups\n -\n mdpopups\n\n\nhttps://github.com/facelessuser/sublime-markdown\n -\n python-markdown\n\n\nhttps://github.com/facelessuser/sublime-backrefs\n -\n backrefs\n\n\nhttps://github.com/facelessuser/sublime-regex\n -\n regex\n\n\n\n\n\n\n\n\nDownload and unpack or git clone the latest RegReplace release and unpack as \nRegReplace\n:\n\n\n\n\nhttps://github.com/facelessuser/RegReplace\n -\n RegReplace\n\n\n\n\n\n\n\n\nCreate a folder under \nPackages\n called \n00-dependencies\n and under that folder create a file called \n00-dependencies.py\n:\n\n\nCopy the following code to \n00-dependencies.py\n (this code was taken from Package Control):\n\n\nimport\n \nsys\n\n\nimport\n \nos\n\n\nfrom\n \nos.path\n \nimport\n \ndirname\n\n\n\nif\n \nos\n.\nname\n \n==\n \nnt\n:\n\n    \nfrom\n \nctypes\n \nimport\n \nwindll\n,\n \ncreate_unicode_buffer\n\n\n\nimport\n \nsublime\n\n\n\n\nif\n \nsys\n.\nversion_info\n \n=\n \n(\n3\n,):\n\n    \ndef\n \ndecode\n(\npath\n):\n\n        \nreturn\n \npath\n\n\n    \ndef\n \nencode\n(\npath\n):\n\n        \nreturn\n \npath\n\n\n    \nif\n \nos\n.\npath\n.\nbasename\n(\n__file__\n)\n \n==\n \nsys_path.py\n:\n\n        \npc_package_path\n \n=\n \ndirname\n(\ndirname\n(\n__file__\n))\n\n    \n# When loaded as a .sublime-package file, the filename ends up being\n\n    \n# Package Control.sublime-package/Package Control.package_control.sys_path\n\n    \nelse\n:\n\n        \npc_package_path\n \n=\n \ndirname\n(\n__file__\n)\n\n    \nst_version\n \n=\n \nu\n3\n\n\n\nelse\n:\n\n    \ndef\n \ndecode\n(\npath\n):\n\n        \nif\n \nnot\n \nisinstance\n(\npath\n,\n \nunicode\n):\n\n            \npath\n \n=\n \npath\n.\ndecode\n(\nsys\n.\ngetfilesystemencoding\n())\n\n        \nreturn\n \npath\n\n\n    \ndef\n \nencode\n(\npath\n):\n\n        \nif\n \nisinstance\n(\npath\n,\n \nunicode\n):\n\n            \npath\n \n=\n \npath\n.\nencode\n(\nsys\n.\ngetfilesystemencoding\n())\n\n        \nreturn\n \npath\n\n\n    \npc_package_path\n \n=\n \ndecode\n(\nos\n.\ngetcwd\n())\n\n    \nst_version\n \n=\n \nu\n2\n\n\n\n\nst_dir\n \n=\n \ndirname\n(\ndirname\n(\npc_package_path\n))\n\n\n\n\ndef\n \nadd\n(\npath\n,\n \nfirst\n=\nFalse\n):\n\n    \n\n\n    Adds an entry to the beginning of sys.path, working around the fact that\n\n\n    Python 2.6 can\nt import from non-ASCII paths on Windows.\n\n\n\n    :param path:\n\n\n        A unicode string of a folder, zip file or sublime-package file to\n\n\n        add to the path\n\n\n\n    :param first:\n\n\n        If the path should be added at the beginning\n\n\n    \n\n\n    \nif\n \nos\n.\nname\n \n==\n \nnt\n:\n\n        \n# Work around unicode path import issue on Windows with Python 2.6\n\n        \nbuf\n \n=\n \ncreate_unicode_buffer\n(\n512\n)\n\n        \nif\n \nwindll\n.\nkernel32\n.\nGetShortPathNameW\n(\npath\n,\n \nbuf\n,\n \nlen\n(\nbuf\n)):\n\n            \npath\n \n=\n \nbuf\n.\nvalue\n\n\n    \nenc_path\n \n=\n \nencode\n(\npath\n)\n\n\n    \nif\n \nos\n.\npath\n.\nexists\n(\nenc_path\n):\n\n        \nif\n \nfirst\n:\n\n            \ntry\n:\n\n                \nsys\n.\npath\n.\nremove\n(\nenc_path\n)\n\n            \nexcept\n \n(\nValueError\n):\n\n                \npass\n\n            \nsys\n.\npath\n.\ninsert\n(\n0\n,\n \nenc_path\n)\n\n        \nelif\n \nenc_path\n \nnot\n \nin\n \nsys\n.\npath\n:\n\n            \nsys\n.\npath\n.\nappend\n(\nenc_path\n)\n\n\n\n\ndef\n \nremove\n(\npath\n):\n\n    \n\n\n    Removes a path from sys.path if it is present\n\n\n\n    :param path:\n\n\n        A unicode string of a folder, zip file or sublime-package file\n\n\n    \n\n\n    \ntry\n:\n\n        \nsys\n.\npath\n.\nremove\n(\nencode\n(\npath\n))\n\n    \nexcept\n \n(\nValueError\n):\n\n        \npass\n\n\n    \nif\n \nos\n.\nname\n \n==\n \nnt\n:\n\n        \nbuf\n \n=\n \ncreate_unicode_buffer\n(\n512\n)\n\n        \nif\n \nwindll\n.\nkernel32\n.\nGetShortPathNameW\n(\npath\n,\n \nbuf\n,\n \nlen\n(\nbuf\n)):\n\n            \npath\n \n=\n \nbuf\n.\nvalue\n\n        \ntry\n:\n\n            \nsys\n.\npath\n.\nremove\n(\nencode\n(\npath\n))\n\n        \nexcept\n \n(\nValueError\n):\n\n            \npass\n\n\n\n\ndef\n \ngenerate_dependency_paths\n(\nname\n):\n\n    \n\n\n    Accepts a dependency name and generates a dict containing the three standard\n\n\n    import paths that are valid for the current machine.\n\n\n\n    :param name:\n\n\n        A unicode string name of the dependency\n\n\n\n    :return:\n\n\n        A dict with the following keys:\n\n\n         - \nver\n\n\n         - \nplat\n\n\n         - \narch\n\n\n    \n\n\n    \npackages_dir\n \n=\n \nos\n.\npath\n.\njoin\n(\nst_dir\n,\n \nu\nPackages\n)\n\n    \ndependency_dir\n \n=\n \nos\n.\npath\n.\njoin\n(\npackages_dir\n,\n \nname\n)\n\n\n    \nver\n \n=\n \nu\nst\n%s\n \n%\n \nst_version\n\n    \nplat\n \n=\n \nsublime\n.\nplatform\n()\n\n    \narch\n \n=\n \nsublime\n.\narch\n()\n\n\n    \nreturn\n \n{\n\n        \nall\n:\n \nos\n.\npath\n.\njoin\n(\ndependency_dir\n,\n \nall\n),\n\n        \nver\n:\n \nos\n.\npath\n.\njoin\n(\ndependency_dir\n,\n \nver\n),\n\n        \nplat\n:\n \nos\n.\npath\n.\njoin\n(\ndependency_dir\n,\n \nu\n%s\n_\n%s\n \n%\n \n(\nver\n,\n \nplat\n)),\n\n        \narch\n:\n \nos\n.\npath\n.\njoin\n(\ndependency_dir\n,\n \nu\n%s\n_\n%s\n_\n%s\n \n%\n \n(\nver\n,\n \nplat\n,\n \narch\n))\n\n    \n}\n\n\n\n\ndef\n \nadd_dependency\n(\nname\n,\n \nfirst\n=\nFalse\n):\n\n    \n\n\n    Accepts a dependency name and automatically adds the appropriate path\n\n\n    to sys.path, if the dependency has a path for the current platform and\n\n\n    architecture.\n\n\n\n    :param name:\n\n\n        A unicode string name of the dependency\n\n\n\n    :param first:\n\n\n        If the path should be added to the beginning of the list\n\n\n    \n\n\n    \ndep_paths\n \n=\n \ngenerate_dependency_paths\n(\nname\n)\n\n\n    \nfor\n \npath\n \nin\n \ndep_paths\n.\nvalues\n():\n\n        \nif\n \nos\n.\npath\n.\nexists\n(\nencode\n(\npath\n)):\n\n            \nadd\n(\npath\n,\n \nfirst\n=\nfirst\n)\n\n\n\n\nadd_dependency\n(\npygments\n)\n\n\nadd_dependency\n(\nmarkupsafe\n)\n\n\nadd_dependency\n(\npython-markdown\n)\n\n\nadd_dependency\n(\npython-jinja2\n)\n\n\nadd_dependency\n(\nmdpopups\n)\n\n\nadd_dependency\n(\nbackrefs\n)\n\n\nadd_dependency\n(\nregex\n)\n\n\n\n\n\n\n\n\n\nRestart and enjoy.\n\n\n\n\n\n\nGit Cloning\n\ue157\n\n\n\n\n\n\nQuit Sublime Text.\n\n\n\n\n\n\nOpen a terminal and enter the following.  For dependencies replace the url with the appropriate URL, and the appropriate folder to check it out to:\n\n\ncd /path/to/Sublime Text 3/Packages\ngit clone https://github.com/facelessuser/RegReplace.git RegReplace\n\n\n\n\n\n\n\n\nRestart Sublime Text.", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#installation", 
            "text": "", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#package-control", 
            "text": "The recommended way to install RegReplace is via  Package Control .  Package Control will install the correct branch on your system and keep it up to date.    Ensure Package Control is installed.  Instructions are found  here .    In Sublime Text, press  ctrl  +  shift  +  p  (Win, Linux) or  cmd  +  shift  +  p  (OSX) to bring up the quick panel and start typing  Package Control: Install Package .  Select the command and it will show a list of installable plugins.    Start typing  RegReplace ; when you see it, select it.    Restart to be sure everything is loaded proper.    Enjoy!", 
            "title": "Package Control"
        }, 
        {
            "location": "/installation/#manual-installation", 
            "text": "Warning  This is not the recommended way to install RegReplace for the average user.  Installing this way  will not  get automatically updated.  If you are forking for a pull request, you should  just  clone RegReplace and run Package Control's  Satisfy Dependency  command to get all the dependencies.   For those who want to install RegReplace without package control, here are the steps.  It understood that some people for what ever reason will prefer manually and may even have legitimate reasons to do so.  When going this route, you will have to keep all the packages updated yourself.     Download the latest releases of the following dependencies and unpack or git clone in the  Packages  folder as shown below:   https://bitbucket.org/teddy_beer_maniac/sublime-text-dependency-markupsafe  -  markupsafe  https://bitbucket.org/teddy_beer_maniac/sublime-text-dependency-jinja2  -  python-jinja2  https://github.com/packagecontrol/pygments  -  pygments  https://github.com/facelessuser/sublime-markdown-popups  -  mdpopups  https://github.com/facelessuser/sublime-markdown  -  python-markdown  https://github.com/facelessuser/sublime-backrefs  -  backrefs  https://github.com/facelessuser/sublime-regex  -  regex     Download and unpack or git clone the latest RegReplace release and unpack as  RegReplace :   https://github.com/facelessuser/RegReplace  -  RegReplace     Create a folder under  Packages  called  00-dependencies  and under that folder create a file called  00-dependencies.py :  Copy the following code to  00-dependencies.py  (this code was taken from Package Control):  import   sys  import   os  from   os.path   import   dirname  if   os . name   ==   nt : \n     from   ctypes   import   windll ,   create_unicode_buffer  import   sublime  if   sys . version_info   =   ( 3 ,): \n     def   decode ( path ): \n         return   path \n\n     def   encode ( path ): \n         return   path \n\n     if   os . path . basename ( __file__ )   ==   sys_path.py : \n         pc_package_path   =   dirname ( dirname ( __file__ )) \n     # When loaded as a .sublime-package file, the filename ends up being \n     # Package Control.sublime-package/Package Control.package_control.sys_path \n     else : \n         pc_package_path   =   dirname ( __file__ ) \n     st_version   =   u 3  else : \n     def   decode ( path ): \n         if   not   isinstance ( path ,   unicode ): \n             path   =   path . decode ( sys . getfilesystemencoding ()) \n         return   path \n\n     def   encode ( path ): \n         if   isinstance ( path ,   unicode ): \n             path   =   path . encode ( sys . getfilesystemencoding ()) \n         return   path \n\n     pc_package_path   =   decode ( os . getcwd ()) \n     st_version   =   u 2  st_dir   =   dirname ( dirname ( pc_package_path ))  def   add ( path ,   first = False ): \n          Adds an entry to the beginning of sys.path, working around the fact that      Python 2.6 can t import from non-ASCII paths on Windows.      :param path:          A unicode string of a folder, zip file or sublime-package file to          add to the path      :param first:          If the path should be added at the beginning       \n\n     if   os . name   ==   nt : \n         # Work around unicode path import issue on Windows with Python 2.6 \n         buf   =   create_unicode_buffer ( 512 ) \n         if   windll . kernel32 . GetShortPathNameW ( path ,   buf ,   len ( buf )): \n             path   =   buf . value \n\n     enc_path   =   encode ( path ) \n\n     if   os . path . exists ( enc_path ): \n         if   first : \n             try : \n                 sys . path . remove ( enc_path ) \n             except   ( ValueError ): \n                 pass \n             sys . path . insert ( 0 ,   enc_path ) \n         elif   enc_path   not   in   sys . path : \n             sys . path . append ( enc_path )  def   remove ( path ): \n          Removes a path from sys.path if it is present      :param path:          A unicode string of a folder, zip file or sublime-package file       \n\n     try : \n         sys . path . remove ( encode ( path )) \n     except   ( ValueError ): \n         pass \n\n     if   os . name   ==   nt : \n         buf   =   create_unicode_buffer ( 512 ) \n         if   windll . kernel32 . GetShortPathNameW ( path ,   buf ,   len ( buf )): \n             path   =   buf . value \n         try : \n             sys . path . remove ( encode ( path )) \n         except   ( ValueError ): \n             pass  def   generate_dependency_paths ( name ): \n          Accepts a dependency name and generates a dict containing the three standard      import paths that are valid for the current machine.      :param name:          A unicode string name of the dependency      :return:          A dict with the following keys:           -  ver           -  plat           -  arch       \n\n     packages_dir   =   os . path . join ( st_dir ,   u Packages ) \n     dependency_dir   =   os . path . join ( packages_dir ,   name ) \n\n     ver   =   u st %s   %   st_version \n     plat   =   sublime . platform () \n     arch   =   sublime . arch () \n\n     return   { \n         all :   os . path . join ( dependency_dir ,   all ), \n         ver :   os . path . join ( dependency_dir ,   ver ), \n         plat :   os . path . join ( dependency_dir ,   u %s _ %s   %   ( ver ,   plat )), \n         arch :   os . path . join ( dependency_dir ,   u %s _ %s _ %s   %   ( ver ,   plat ,   arch )) \n     }  def   add_dependency ( name ,   first = False ): \n          Accepts a dependency name and automatically adds the appropriate path      to sys.path, if the dependency has a path for the current platform and      architecture.      :param name:          A unicode string name of the dependency      :param first:          If the path should be added to the beginning of the list       \n\n     dep_paths   =   generate_dependency_paths ( name ) \n\n     for   path   in   dep_paths . values (): \n         if   os . path . exists ( encode ( path )): \n             add ( path ,   first = first )  add_dependency ( pygments )  add_dependency ( markupsafe )  add_dependency ( python-markdown )  add_dependency ( python-jinja2 )  add_dependency ( mdpopups )  add_dependency ( backrefs )  add_dependency ( regex )     Restart and enjoy.", 
            "title": "Manual Installation"
        }, 
        {
            "location": "/installation/#git-cloning", 
            "text": "Quit Sublime Text.    Open a terminal and enter the following.  For dependencies replace the url with the appropriate URL, and the appropriate folder to check it out to:  cd /path/to/Sublime Text 3/Packages\ngit clone https://github.com/facelessuser/RegReplace.git RegReplace    Restart Sublime Text.", 
            "title": "Git Cloning"
        }, 
        {
            "location": "/usage/", 
            "text": "User Guide\n\ue157\n\n\n\n\nRegular Expression Engine\n\n\nRemember that the regular expression engine that is used is Python's \nre\n, not Sublime's internal regular expression engine.  If enabling \nextended_back_references\n, additional syntax is added which is covered in the \nbackrefs documentation\n.\n\n\nTo enable such features as case insensitivity or dotall, see \nre's documentation\n.\n\n\n\n\nCreate Find and Replace Sequences\n\ue157\n\n\nTo use, replacements must be defined in the \nreg_replace_rules.sublime-settings\n file.\n\n\nThere are two types of rules that can be created: scope rules (with optional scope qualifiers) or scope searches that apply regular expressions to the targeted scopes.  We will call these \nregex\n and \nscope regex\n rules respectively.\n\n\nRegex\n rules use regular expressions to find regions, and then you can use scopes to qualify the regions before applying the replace.  These rules can use the following options:\n\n\n    \n/*\n\n\n    ###### Regex with optional scope qualifiers. ######\n\n\n    - find (required)\n\n\n    - replace\n\n\n    - literal\n\n\n    - literal_ignorecase\n\n\n    - greedy\n\n\n    - scope_filter\n\n\n    - plugin\n\n\n    - args\n\n\n    */\n\n\n    \n{\n\n        \nreplacements\n:\n \n{\n\n            \nhtml5_remove_deprecated_type_attr\n:\n \n{\n\n                \nfind\n:\n \n(?i)(\n(style|script)[^\n]*)\\\\stype=(\\\n|\n)text/(css|javascript)(\\\n|\n)([^\n]*\n)\n,\n\n                \nreplace\n:\n \n\\\\1\\\\6\n,\n\n                \ngreedy\n:\n \ntrue\n\n            \n},\n\n\n\n\n\nThe second kind of rule is the \nscope regex\n which allows you to search for a scope type and then apply regular expression to the regions to filter the matches and make replacements.\n\n\n    \n/*\n\n\n    ###### Scope search with regular expression applied to scope region. ######\n\n\n    - scope (required)\n\n\n    - find\n\n\n    - replace\n\n\n    - literal\n\n\n    - literal_ignorecase\n\n\n    - greedy\n\n\n    - greedy_scope\n\n\n    - multi_pass\n\n\n    - plugin\n\n\n    - args\n\n\n    */\n\n\n    \n{\n\n            \nreplacements\n:\n \n{\n\n                \nremove_comments\n:\n \n{\n\n                    \nscope\n:\n \ncomment\n,\n\n                    \nfind\n \n:\n \n(([^\\\\n\\\\r]*)(\\\\r\\\\n|\\\\n))*([^\\\\n\\\\r]+)\n,\n\n                    \nreplace\n:\n \n,\n\n                    \ngreedy\n:\n \ntrue\n,\n\n                    \ngreedy_scope\n:\n \ntrue\n\n                \n}\n\n\n\n\n\nA description of all the options is found below:\n\n\n    name:               (str): Rule name.  Required.\n\n    find:               (str): Regular expression pattern or literal string.\n                        Use (?i) for case insensitive. Use (?s) for dotall.\n                        See https://docs.python.org/3.4/library/re.html for more info on regex flags.\n                        Required unless \nscope\n is defined.\n\n    replace:            (str - default=r\n\\0\n): Replace pattern.\n\n    literal:            (bool - default=False): Preform a non-regex, literal search and replace.\n\n    literal_ignorecase: (bool - default=False): Ignore case when \nliteral\n is true.\n\n    scope:              (str): Scope to search for and to apply optional regex to.\n                        Required unless \nfind\n is defined.\n\n    scope_filter:       ([str] - default=[]): An array of scope qualifiers for the match.\n                        Only used when \nscope\n is not defined.\n\n                        - Any instance of scope qualifies match: scope.name\n                        - Entire match of scope qualifies match: !scope.name\n                        - Any instance of scope disqualifies match: -scope.name\n                        - Entire match of scope disqualifies match: -!scope.name\n\n    greedy:             (bool - default=True): Apply action to all instances (find all).\n                        Used when \nfind\n is defined.\n\n    greedy_scope:       (bool - default=True): Find all the scopes specified by \nscope.\n\n\n    multi_pass:         (bool - default=False): Perform multiple sweeps on the scope region to find\n                        and replace all instances of the regex when regex cannot be formatted to find\n                        all instances.  Since a replace can change a scope, this can be useful.\n\n    plugin:             (str): Define replace plugin for more advanced replace logic.\n                        Only used for regex replaces and replace.\n\n    args:               (dict): Arguments for \nplugin\n.\n                        Only used for regex replaces and replace.\n\n\n\n\nOnce you have replacements defined, there are a number of ways you can run a sequence.  One way is to create a command in the command palette by editing/creating a \nDefault.sublime-commands\n in your \nUser\n folder and then adding your command(s).\n\n\nBasic replacement command:\n\n\n    \n{\n\n        \ncaption\n:\n \nReg Replace: Remove Trailing Spaces\n,\n\n        \ncommand\n:\n \nreg_replace\n,\n\n        \nargs\n:\n \n{\nreplacements\n:\n \n[\nremove_trailing_spaces\n]}\n\n    \n},\n\n\n\n\n\nChained replacements in one command:\n\n\n    \n{\n\n        \ncaption\n:\n \nReg Replace: Remove HTML Comments and Trailing Spaces\n,\n\n        \ncommand\n:\n \nreg_replace\n,\n\n        \nargs\n:\n \n{\nreplacements\n:\n \n[\nremove_html_comments\n,\n \nremove_trailing_spaces\n]}\n\n    \n}\n\n\n\n\n\nYou can also bind a replacement command to a shortcut.\n\n\n    \n{\n\n        \nkeys\n:\n \n[\nctrl+shift+t\n],\n\n        \ncommand\n:\n \nreg_replace\n,\n\n        \nargs\n:\n \n{\nreplacements\n:\n \n[\nremove_trailing_spaces\n]}\n\n    \n}\n\n\n\n\n\nA Better Way To Create Regex Rules\n\ue157\n\n\nRecently a new feature was added that allows the editing of the regular expression rules to be done in a Python syntax highlighted panel.  This allows for a less cumbersome editing experience.  Users can even split their regular expressions on multiple lines and add comments which will all be preserved for the next time the rule is viewed.\n\n\nWhile in the edit panel, you can press \nctrl\n + \ns\n on Windows/Linux (or \nsuper\n + \ns\n on OSX) and the rule will be saved back to the settings file.  On save, the regex is compiled to test if it is valid; if it fails, you should be alerted and the save will be canceled.\n\n\nTo edit, insert, or delete rules, you can use the following command palette commands:\n\n\n\n\nRegReplace: Edit Regular Expression Rule\n\n\nRegReplace: Create New Regular Expression Rule\n\n\nRegReplace: Delete Regular Expression Rule\n\n\n\n\n\n\nYou can also test the regular expression from the edit panel.  At the bottom of the panel, you should see the \ntest\n variable which will allow you to configure a sequence to run from the panel.  Once configured, you can press \nctrl\n + \nf\n on Windows/Linux (or \nsuper\n + \nf\n on OSX) to execute.  Keep in mind, you can run the current rule sequenced together with others in the test configuration to test how it plays with other rules.  \ntest\n is not saved with the other settings, but is only good for the current session.\n\n\n# ----------------------------------------------------------------------------------------\n\n\n# test: Here you can setup a test command.  This is not saved and is just used for this session.\n\n\n#     - replacements ([str]): A list of regex rules to sequence together.\n\n\n#     - find_only (bool): Highlight current find results and prompt for action.\n\n\n#     - action (str): Apply the given action (fold|unfold|mark|unmark|select).\n\n\n#       This overrides the default replace action.\n\n\n#     - options (dict): optional parameters for actions (see documentation for more info).\n\n\n#         - key (str): Unique name for highlighted region.\n\n\n#         - scope (str - default=\ninvalid\n): Scope name to use as the color.\n\n\n#         - style (str - default=\noutline\n): Highlight style (solid|underline|outline).\n\n\n#     - multi_pass (bool): Repeatedly sweep with sequence to find all instances.\n\n\n#     - no_selection (bool): Overrides the \nselection_only\n setting and forces no selections.\n\n\n#     - regex_full_file_with_selections (bool): Apply regex search to full file then apply\n\n\n#       action to results under selections.\n\n\n\n\n\n\n\nDepending on how the test command was configured, it may cause the panel to close, or you might accidentally close it by pressing \nesc\n or running some other command.  When closed, the currently opened rule is not lost and can be brought back by running the command palette command \nRegReplace: Show Edit Panel\n (the command will only work if the panel has been opened at least once).  You can also use the panel icon in the bottom left hand corner of the Sublime Text window (only on later versions of Sublime Text 3).\n\n\nView Without Replacing\n\ue157\n\n\nIf you would simply like to view what the sequence would find without replacing, you can construct a command to highlight targets without replacing them (each pass could affect the end result, but this just shows all passes without predicting the replacements).\n\n\nJust add the \"find_only\" argument and set it to true.\n\n\n    \n{\n\n        \ncaption\n:\n \nReg Replace: Remove Trailing Spaces\n,\n\n        \ncommand\n:\n \nreg_replace\n,\n\n        \nargs\n:\n \n{\nreplacements\n:\n \n[\nremove_trailing_spaces\n],\n \nfind_only\n:\n \ntrue\n}\n\n    \n},\n\n\n\n\n\nA prompt will appear allowing you to replace the highlighted regions.  Regions will be cleared on cancel.\n\n\nIf for any reason the highlights do not get cleared, you can simply run the \"RegReplace: Clear Highlights\" command from the command palette.\n\n\nHighlight color and style can be changed in the settings file.\n\n\nOverride Actions\n\ue157\n\n\nIf instead of replacing you would like to do something else, you can override the action. Actions are defined in commands by setting the \naction\n parameter.  Some actions may require additional parameters be set in the \noptions\n parameter.  See examples below.\n\n\n    \n{\n\n        \ncaption\n:\n \nReg Replace: Fold HTML Comments\n,\n\n        \ncommand\n:\n \nreg_replace\n,\n\n        \nargs\n:\n \n{\nreplacements\n:\n \n[\nremove_html_comments\n],\n \naction\n:\n \nfold\n}\n\n    \n},\n\n    \n{\n\n        \ncaption\n:\n \nReg Replace: Unfold HTML Comments\n,\n\n        \ncommand\n:\n \nreg_replace\n,\n\n        \nargs\n:\n \n{\nreplacements\n:\n \n[\nremove_html_comments\n],\n \naction\n:\n \nunfold\n}\n\n    \n},\n\n    \n{\n\n        \ncaption\n:\n \nReg Replace: Mark Example\n,\n\n        \ncommand\n:\n \nreg_replace\n,\n\n        \nargs\n:\n \n{\n\n            \nreplacements\n:\n \n[\nexample\n],\n\n            \naction\n:\n \nmark\n,\n\n            \noptions\n:\n \n{\nkey\n:\n \nname\n,\n \nscope\n:\n \ninvalid\n,\n \nstyle\n:\n \nunderline\n}\n\n        \n}\n\n    \n},\n\n    \n{\n\n        \ncaption\n:\n \nReg Replace: Unmark Example\n,\n\n        \ncommand\n:\n \nreg_replace\n,\n\n        \nargs\n:\n \n{\n\n            \naction\n:\n \nunmark\n,\n\n            \noptions\n:\n \n{\nkey\n:\n \nname\n}\n\n        \n}\n\n    \n},\n\n\n\n\n\nSupported override actions\n\ue157\n\n\n\n\nfold\n\n\nunfold\n\n\nmark\n\n\nunmark\n\n\nselect\n\n\n\n\nFold Override\n\ue157\n\n\naction\n:\n \nfold\n\n\n\n\n\nThis action folds the given find target.  This action has no parameters.\n\n\nUnfold Override\n\ue157\n\n\naction\n:\n \nunfold\n\n\n\n\n\nThis action unfolds the all regions that match the given find target.  This action has no parameters\n\n\nMark Override\n\ue157\n\n\naction\n:\n \nmark\n\n\n\n\n\nThis action highlights the regions of the given find target.\n\n\nMark Options\n\ue157\n\n\nAction options are specified with the \noptions\n key.\n\n\nRequired Parameters\n\ue157\n\n\noptions\n:\n \n{\nkey\n:\n \nname\n}\n\n\n\n\n\nUnique name for highlighted regions.\n\n\nOptional Parameters\n\ue157\n\n\noptions\n:\n \n{\nscope\n:\n \ninvalid\n}\n\n\n\n\n\nScope name to use as the color. Default is \ninvalid\n.\n\n\noptions\n:\n \n{\nstyle\n:\n \noutline\n}\n\n\n\n\n\nHighlight style (solid|underline|outline). Default is \noutline\n.\n\n\nUnmark Override\n\ue157\n\n\naction\n:\n \nunmark\n\n\n\n\n\nThis action removes the highlights of a given \nkey\n.  Replacements can be omitted with this command.\n\n\nUnmark Options\n\ue157\n\n\nAction options are specified with the \noptions\n key.\n\n\nRequired Parameters\n\ue157\n\n\noptions\n:\n \n{\nkey\n:\n \nname\n}\n\n\n\n\n\nunique name of highlighted regions to clear\n\n\nSelect Override\n\ue157\n\n\naction\n:\n \nselect\n\n\n\n\n\nThis action selects the regions of the given find target.\n\n\nMulti-Pass\n\ue157\n\n\nSometimes a regular expression cannot be made to find all instances in one pass.  In this case, you can use the multi-pass option.  This option will cause the entire sequence to repeatedly executed until all instances are found and replaced.  To protect against a poorly constructed multi-pass regular expression looping forever, there is a default max sweep threshold that will cause the sequence to kick out if it is reached.  This threshold can be tweaked in the settings file.\n\n\nMulti-pass is used in replaces and cannot be paired with override actions (it will be ignored), but it can be paired with \nfind_only\n as \nfind_only\n allows you to initiate a replace.\n\n\n    \n{\n\n        \ncaption\n:\n \nReg Replace: Remove Trailing Spaces\n,\n\n        \ncommand\n:\n \nreg_replace\n,\n\n        \nargs\n:\n \n{\nreplacements\n:\n \n[\nexample\n],\n \nmulti_pass\n:\n \ntrue\n}\n\n    \n},\n\n\n\n\n\nReplace Only Under Selection(s)\n\ue157\n\n\nSometimes you only want to search under selections.  This can be done by enabling the \nselection_only\n setting in the settings file.  By enabling this setting, regular expression targets will be limited to the current selection if and only if a selection exists.  Auto replace/highlight on save events ignore this setting.  If you have a command that you wish to ignore this setting, just set the \nno_selection\n argument to \ntrue\n.  Highlight style will be forced to underline selections if \nfind_only\n is set to ensure they will show up.\n\n\n    \n// Ignore \nselection_only\n setting\n\n    \n{\n\n        \ncaption\n:\n \nReg Replace: Remove Trailing Spaces\n,\n\n        \ncommand\n:\n \nreg_replace\n,\n\n        \nargs\n:\n \n{\nreplacements\n:\n \n[\nexample\n],\n \nmulti_pass\n:\n \ntrue\n,\n \nno_selection\n:\n \ntrue\n}\n\n    \n},\n\n\n\n\n\nUse Regular Expressions on Entire File Buffer when Using Selections\n\ue157\n\n\nWhen \nselection_only\n is enabled, you might have a regular expression chain that lends itself better to performing the regular expression on the entire file buffer and then pick the matches under the selections as opposed to the default behavior of applying the regular expression directly to the selection buffer.  To do this, you can use the option \nregex_full_file_with_selections\n.\n\n\n    \n{\n\n        \ncaption\n:\n \nRemove: All Comments\n,\n\n        \ncommand\n:\n \nreg_replace\n,\n\n        \nargs\n:\n \n{\n\n            \nreplacements\n:\n \n[\n\n                \nremove_comments\n,\n \nremove_trailing_spaces\n,\n\n                \nremove_excessive_newlines\n,\n \nensure_newline_at_file_end\n\n            \n],\n\n            \nfind_only\n:\n \ntrue\n,\n\n            \nregex_full_file_with_selections\n:\n \ntrue\n\n        \n}\n\n    \n},\n\n\n\n\n\nApply Regular Expressions Right Before File Save Event\n\ue157\n\n\nIf you want to automatically apply a sequence right before a file saves, you can define sequences in the \nreg_replace.sublime-settings\n file.  Each \"on save\" sequence will be applied to the files you specify by file patterns or file regular expression.  Also, you must have \non_save\n set to \ntrue\n.  You can also just highlight, fold, or unfold by regular expression by adding the \naction\n: \nmark\n key/value pair (supported options are \nmark\n, \nfold\n, and \nunfold\n). Both types can be used at the same time. Actions are performed after replacements.\n\n\nExample:\n\n\n    \n// If on_save is true, RegReplace will search through the file patterns listed below right before a file is saved,\n\n    \n// if the file name matches a file pattern, the sequence will be applied before the file is saved.\n\n    \n// RegReplace will apply all sequences that apply to a given file in the order they appear below.\n\n    \non_save\n:\n \ntrue\n,\n\n\n    \n// Highlight visual settings\n\n    \non_save_highlight_scope\n:\n \ninvalid\n,\n\n    \non_save_highlight_style\n:\n \noutline\n,\n\n\n    \non_save_sequences\n:\n \n[\n\n        \n// An example on_save event that removes dangling commas from json files\n\n        \n// - file_regex: an array of regex strings that must match the file for the sequence to be applied\n\n        \n// - case: regex case sensitivity (true|false) false is default (this setting is optional)\n\n        \n//   See https://docs.python.org/3.4/library/re.html for more information on Python\ns re.\n\n        \n// - file_pattern: an array of file patterns that must match for the sequence to be applied\n\n        \n// - sequence: an array of replacement definitions to be applied on saving the file\n\n        \n// - multi_pass: perform multiple passes on file to catch all regex instances\n\n        \n{\n\n            \nfile_regex\n:\n \n[\n(?i).*\\\\.sublime-(settings|commands|menu|keymap|mousemap|theme|build|project|completions|commands)\n],\n\n            \nfile_pattern\n:\n \n[\n*.json\n],\n\n            \nsequence\n:\n \n[\nremove_json_dangling_commas\n]\n\n        \n},\n\n        \n// An example on_save_sequence that targets all files and highlights trailing spaces\n\n        \n// - file_pattern: an array of file patterns that must match for the sequence to be applied\n\n        \n// - sequence: an array of replacement definitions to be applied on saving the file\n\n        \n// - action: (mark|fold|unfold) instead of replace\n\n        \n{\n\n            \nfile_pattern\n:\n \n[\n*\n],\n\n            \nsequence\n:\n \n[\nremove_trailing_spaces\n],\n\n            \naction\n:\n \nmark\n\n        \n}\n\n    \n],\n\n\n\n\n\nCustom Replace Plugins\n\ue157\n\n\nThere are times that a simple regular expression and replace is not enough.  Since RegReplace uses Python's re regular expression engine, we can use python code to intercept the replace and do more complex things via a plugin.  Because this uses Python's re, this will only be applied when doing regular expression searches (not literal searches).\n\n\nIn this example we are going to search for dates with the form YYYYMMDD and increment them by one day.\n\n\nBelow is the regular expression rule; notice we have defined a plugin to replace.  Plugins are defined as if you were importing a module in python.  So in this example, we are loading it from the \nUser\n package. You do not need an \n__init__.py\n file in \nrr_modules\n folder; it is recommended to not use one as Sublime shouldn't bother loading these files as RegReplace will load them when needed.\n\n\ndate_up\n:\n \n{\n\n    \nfind\n:\n \n(?P\nyear\n\\\\d{4})(?P\nmonth\n\\\\d{2})(?P\nday\n\\\\d{2})\n,\n\n    \nplugin\n:\n \nUser.rr_modules.date_up\n\n    \n// \nargs\n: {\nsome_plugin_arguments\n: \nif_desired\n}  \n== optional plugin arguments\n\n\n}\n\n\n\n\n\nNext we can define the command that will utilize the regex rule:\n\n\n    \n{\n\n        \ncaption\n:\n \nReplace: Date Up\n,\n\n        \ncommand\n:\n \nreg_replace\n,\n\n        \nargs\n:\n \n{\nreplacements\n:\n \n[\ndate_up\n],\n \nfind_only\n:\n \ntrue\n}\n\n    \n},\n\n\n\n\n\nLastly, we can provide the plugin.  RegReplace will load the plugin and look for a function called \nreplace\n.  \nreplace\n takes a python re match object, and any arguments you want to feed it.  Arguments are defined in the regular expression rule as shown above.\n\n\nSHORT_MONTH\n \n=\n \n30\n\n\nLONG_MONTH\n \n=\n \n31\n\n\nFEB_MONTH\n \n=\n \n28\n\n\nFEB_LEAP_MONTH\n \n=\n \n29\n\n\n\nJAN\n \n=\n \n1\n\n\nFEB\n \n=\n \n2\n\n\nMAR\n \n=\n \n3\n\n\nAPR\n \n=\n \n4\n\n\nMAY\n \n=\n \n5\n\n\nJUN\n \n=\n \n6\n\n\nJUL\n \n=\n \n7\n\n\nAUG\n \n=\n \n8\n\n\nSEP\n \n=\n \n9\n\n\nOCT\n \n=\n \n10\n\n\nNOV\n \n=\n \n11\n\n\nDEC\n \n=\n \n12\n\n\n\n\ndef\n \nis_leap_year\n(\nyear\n):\n\n    \nreturn\n \n((\nyear\n \n%\n \n4\n \n==\n \n0\n)\n \nand\n \n(\nyear\n \n%\n \n100\n \n!=\n \n0\n))\n \nor\n \n(\nyear\n \n%\n \n400\n \n==\n \n0\n)\n\n\n\n\ndef\n \ndays_in_months\n(\nmonth\n,\n \nyear\n):\n\n    \ndays\n \n=\n \nLONG_MONTH\n\n    \nif\n \nmonth\n \n==\n \nFEB\n:\n\n        \ndays\n \n=\n \nFEB_LEAP_MONTH\n \nif\n \nis_leap_year\n(\nyear\n)\n \nelse\n \nFEB_MONTH\n\n    \nelif\n \nmonth\n \nin\n \n[\nSEP\n,\n \nAPR\n,\n \nJUN\n,\n \nNOV\n]:\n\n        \ndays\n \n=\n \nSHORT_MONTH\n\n    \nreturn\n \ndays\n\n\n\n\ndef\n \nincrement_by_day\n(\nday\n,\n \nmonth\n,\n \nyear\n):\n\n    \nmdays\n \n=\n \ndays_in_months\n(\nmonth\n,\n \nyear\n)\n\n    \nif\n \nday\n \n==\n \nmdays\n:\n\n        \nday\n \n=\n \n1\n\n        \nif\n \nmonth\n \n==\n \nDEC\n:\n\n            \nmonth\n \n=\n \nJAN\n\n            \nyear\n \n+=\n \n1\n\n        \nelse\n:\n\n            \nmonth\n \n+=\n \n1\n\n    \nelse\n:\n\n        \nday\n \n+=\n \n1\n\n\n    \nreturn\n \nday\n,\n \nmonth\n,\n \nyear\n\n\n\n\ndef\n \nreplace\n(\nm\n):\n\n    \ng\n \n=\n \nm\n.\ngroupdict\n()\n\n    \nyear\n \n=\n \nint\n(\ng\n[\nyear\n]\n.\nlstrip\n(\n0\n))\n\n    \nmonth\n \n=\n \nint\n(\ng\n[\nmonth\n]\n.\nlstrip\n(\n0\n))\n\n    \nday\n \n=\n \nint\n(\ng\n[\nday\n]\n.\nlstrip\n(\n0\n))\n\n\n    \nday\n,\n \nmonth\n,\n \nyear\n \n=\n \nincrement_by_day\n(\nday\n,\n \nmonth\n,\n \nyear\n)\n\n\n    \nreturn\n \n%04d%02d%02d\n \n%\n \n(\nyear\n,\n \nmonth\n,\n \nday\n)\n\n\n\n\n\nHere is some text to test the example on:\n\n\n# Test 1: 20140228\n# Test 2: 20141231\n# Test 3: 20140101\n\n\n\n\nRegReplace comes with a very simple example you can test with found at \n/Packages/RegReplace/rr_modules/example.py\n. Since package control zips packages, it is hard to view directly without a plugin, so it is posted below as well. Import with \nplugin\n:\n \nRegReplace.rr_modules.example\n.\n\n\nA simple example plugin.\n\n\n\n\ndef\n \nreplace\n(\nm\n,\n \n**\nkwargs\n):\n\n    \nReplace with groups.\n\n\n    \n# pylint: disable=unused-argument\n\n    \ntext\n \n=\n \nHere are your groups: \n\n    \nfor\n \ngroup\n \nin\n \nm\n.\ngroups\n():\n\n        \nif\n \ngroup\n \nis\n \nnot\n \nNone\n:\n\n            \ntext\n \n+=\n \n(\n%s\n)\n \n%\n \ngroup\n\n    \nreturn\n \ntext\n\n\n\n\n\nRegex Module\n\ue157\n\n\nBy default, RegReplace uses Python's \nre\n module.  But if you prefer the\n\nmore advanced \nregex\n regular expression module, you can enable it with the\n\nfollowing setting:\n\n\n    \n// Use the regex module for regular expression.\n\n    \n// https://pypi.python.org/pypi/regex\n\n    \nuse_regex_module\n:\n \ntrue\n,\n\n\n\n\n\nTo select whether to use Version 0 or Version 1 of the regex module, simply change the following setting:\n\n\n    \n// When \nuse_regex_module\n is enabled, select which version of the regex module to use (0 or 1).\n\n    \n// See documentation to understand the differences: https://pypi.python.org/pypi/regex.\n\n    \nregex_module_version\n:\n \n0\n,\n\n\n\n\n\nExtended Back References\n\ue157\n\n\nRegReplace uses a special wrapper around Python's re library called backrefs.  Backrefs was written specifically for RegReplace and adds various additional backrefs that are known to some regular expression engines, but not to Python's re.  Backrefs adds: \n\\p\n, \n\\P\n, \n\\u\n, \n\\U\n, \n\\l\n, \n\\L\n, \n\\Q\n or \n\\E\n (though \n\\u\n and \n\\U\n are replaced with \n\\c\n and \n\\C\n).  It even\n\nadds some of the Posix style classes such as \n[:ascii:]\n etc.\n\n\nBackrefs also works with the regex module, but it enables a smaller portion of back references as the regex module implements a few of the back references already (in one form or the other).  For instance, there was no need to add\n\nUnicode properties as it was already available. And since you can already use Unicode and/or Posix properties to do\n\nuppercase and lowercase character classes in search patterns, and regex already reserves \n\\L\n, it wasn't worth the\n\nextra work to try and add equivalents for \n\\c\n, \n\\C\n, 'l' and \n\\L\n to the search back references.\n\n\nYou can enable extended back references in the settings file:\n\n\n    \n// Use extended back references\n\n    \nextended_back_references\n:\n \ntrue\n\n\n\n\n\nWhen enabled, you can apply the back references to your search and/or replace patterns as you would other back references:\n\n\n    \ntest_case\n:\n \n{\n\n        \nfind\n:\n \n([a-z])(?P\nsomegroup\n[a-z]*)((?:_[a-z]+)+)\n,\n\n        \nreplace\n:\n \n\\\\c\\\\1\\\\L\\\\g\nsomegroup\n\\\\E\\\\C\\\\g\n3\n\\\\E\n,\n\n        \ngreedy\n:\n \ntrue\n\n    \n}\n\n\n\n\n\nYou can read more about the backrefs' features in the \nbackrefs documentation\n.\n\n\nGetting the Latest Backrefs\n\ue157\n\n\nIt is not always clear when Package Control updates dependencies.  So to force dependency updates, you can run Package Control's \nSatisfy Dependencies\n command which will update to the latest release.\n\n\nUsing Backrefs in RegReplace Plugin\n\ue157\n\n\nYou can import backrefs into a RegReplace plugin:\n\n\nfrom\n \nbackrefs\n \nas\n \nbre\n\n\n\n\n\nOr use bregex for the regex module with backrefs:\n\n\nfrom\n \nbackrefs\n \nas\n \nbregex\n\n\n\n\n\nBackrefs does provide a wrapper for all of re's normal functions such as \nmatch\n, \nsub\n, etc., but is recommended to pre-compile your search patterns \nand\n your replace patterns for the best performance; especially if you plan on reusing the same pattern multiple times.  As re does cache a certain amount of the non-compiled calls you will be spared from some of the performance hit, but backrefs does not cache the pre-processing of search and replace patterns.\n\n\nTo use pre-compiled functions, you compile the search pattern with \ncompile_search\n.  If you want to take advantage of replace backrefs, you need to compile the replace pattern as well.  Notice the compiled pattern is fed into the replace pattern; you can feed the replace compiler the string representation of the search pattern as well, but the compiled pattern will be faster and is the recommended way.\n\n\npattern\n \n=\n \nbre\n.\ncompile_search\n(\nr\nsomepattern\n,\n \nflags\n)\n\n\nreplace\n \n=\n \nbre\n.\ncompile_replace\n(\npattern\n,\n \nr\n\\1 some replace pattern\n)\n\n\n\n\n\nThen you can use the complied search pattern and replace\n\n\ntext\n \n=\n \npattern\n.\nsub\n(\nreplace\n,\n \nr\nsometext\n)\n\n\n\n\n\nor\n\n\nm\n \n=\n \npattern\n.\nmatch\n(\nr\nsometext\n)\n\n\nif\n \nm\n:\n\n    \ntext\n \n=\n \nreplace\n(\nm\n)\n  \n# similar to m.expand(template)\n\n\n\n\n\nTo use the non-compiled search/replace functions, you call them just them as you would in re; the names are the same.  Methods like \nsub\n and \nsubn\n will compile the replace pattern on the fly if given a string.\n\n\nfor\n \nm\n \nin\n \nbre\n.\nfinditer\n(\nr\nsomepattern\n,\n \nsome text\n,\n \nbre\n.\nUNICODE\n \n|\n \nbre\n.\nDOTALL\n):\n\n    \n# do something\n\n\n\n\n\nIf you want to replace without compiling, you can use the \nexpand\n method.\n\n\nm\n \n=\n \nbre\n.\nmatch\n(\nr\nsometext\n)\n\n\nif\n \nm\n:\n\n    \ntext\n \n=\n \nbre\n.\nexpand\n(\nm\n,\n \nr\nreplace pattern\n)", 
            "title": "User Guide"
        }, 
        {
            "location": "/usage/#user-guide", 
            "text": "Regular Expression Engine  Remember that the regular expression engine that is used is Python's  re , not Sublime's internal regular expression engine.  If enabling  extended_back_references , additional syntax is added which is covered in the  backrefs documentation .  To enable such features as case insensitivity or dotall, see  re's documentation .", 
            "title": "User Guide"
        }, 
        {
            "location": "/usage/#create-find-and-replace-sequences", 
            "text": "To use, replacements must be defined in the  reg_replace_rules.sublime-settings  file.  There are two types of rules that can be created: scope rules (with optional scope qualifiers) or scope searches that apply regular expressions to the targeted scopes.  We will call these  regex  and  scope regex  rules respectively.  Regex  rules use regular expressions to find regions, and then you can use scopes to qualify the regions before applying the replace.  These rules can use the following options:       /*      ###### Regex with optional scope qualifiers. ######      - find (required)      - replace      - literal      - literal_ignorecase      - greedy      - scope_filter      - plugin      - args      */ \n\n     { \n         replacements :   { \n             html5_remove_deprecated_type_attr :   { \n                 find :   (?i)( (style|script)[^ ]*)\\\\stype=(\\ | )text/(css|javascript)(\\ | )([^ ]* ) , \n                 replace :   \\\\1\\\\6 , \n                 greedy :   true \n             },   The second kind of rule is the  scope regex  which allows you to search for a scope type and then apply regular expression to the regions to filter the matches and make replacements.       /*      ###### Scope search with regular expression applied to scope region. ######      - scope (required)      - find      - replace      - literal      - literal_ignorecase      - greedy      - greedy_scope      - multi_pass      - plugin      - args      */ \n\n     { \n             replacements :   { \n                 remove_comments :   { \n                     scope :   comment , \n                     find   :   (([^\\\\n\\\\r]*)(\\\\r\\\\n|\\\\n))*([^\\\\n\\\\r]+) , \n                     replace :   , \n                     greedy :   true , \n                     greedy_scope :   true \n                 }   A description of all the options is found below:      name:               (str): Rule name.  Required.\n\n    find:               (str): Regular expression pattern or literal string.\n                        Use (?i) for case insensitive. Use (?s) for dotall.\n                        See https://docs.python.org/3.4/library/re.html for more info on regex flags.\n                        Required unless  scope  is defined.\n\n    replace:            (str - default=r \\0 ): Replace pattern.\n\n    literal:            (bool - default=False): Preform a non-regex, literal search and replace.\n\n    literal_ignorecase: (bool - default=False): Ignore case when  literal  is true.\n\n    scope:              (str): Scope to search for and to apply optional regex to.\n                        Required unless  find  is defined.\n\n    scope_filter:       ([str] - default=[]): An array of scope qualifiers for the match.\n                        Only used when  scope  is not defined.\n\n                        - Any instance of scope qualifies match: scope.name\n                        - Entire match of scope qualifies match: !scope.name\n                        - Any instance of scope disqualifies match: -scope.name\n                        - Entire match of scope disqualifies match: -!scope.name\n\n    greedy:             (bool - default=True): Apply action to all instances (find all).\n                        Used when  find  is defined.\n\n    greedy_scope:       (bool - default=True): Find all the scopes specified by  scope. \n\n    multi_pass:         (bool - default=False): Perform multiple sweeps on the scope region to find\n                        and replace all instances of the regex when regex cannot be formatted to find\n                        all instances.  Since a replace can change a scope, this can be useful.\n\n    plugin:             (str): Define replace plugin for more advanced replace logic.\n                        Only used for regex replaces and replace.\n\n    args:               (dict): Arguments for  plugin .\n                        Only used for regex replaces and replace.  Once you have replacements defined, there are a number of ways you can run a sequence.  One way is to create a command in the command palette by editing/creating a  Default.sublime-commands  in your  User  folder and then adding your command(s).  Basic replacement command:       { \n         caption :   Reg Replace: Remove Trailing Spaces , \n         command :   reg_replace , \n         args :   { replacements :   [ remove_trailing_spaces ]} \n     },   Chained replacements in one command:       { \n         caption :   Reg Replace: Remove HTML Comments and Trailing Spaces , \n         command :   reg_replace , \n         args :   { replacements :   [ remove_html_comments ,   remove_trailing_spaces ]} \n     }   You can also bind a replacement command to a shortcut.       { \n         keys :   [ ctrl+shift+t ], \n         command :   reg_replace , \n         args :   { replacements :   [ remove_trailing_spaces ]} \n     }", 
            "title": "Create Find and Replace Sequences"
        }, 
        {
            "location": "/usage/#a-better-way-to-create-regex-rules", 
            "text": "Recently a new feature was added that allows the editing of the regular expression rules to be done in a Python syntax highlighted panel.  This allows for a less cumbersome editing experience.  Users can even split their regular expressions on multiple lines and add comments which will all be preserved for the next time the rule is viewed.  While in the edit panel, you can press  ctrl  +  s  on Windows/Linux (or  super  +  s  on OSX) and the rule will be saved back to the settings file.  On save, the regex is compiled to test if it is valid; if it fails, you should be alerted and the save will be canceled.  To edit, insert, or delete rules, you can use the following command palette commands:   RegReplace: Edit Regular Expression Rule  RegReplace: Create New Regular Expression Rule  RegReplace: Delete Regular Expression Rule    You can also test the regular expression from the edit panel.  At the bottom of the panel, you should see the  test  variable which will allow you to configure a sequence to run from the panel.  Once configured, you can press  ctrl  +  f  on Windows/Linux (or  super  +  f  on OSX) to execute.  Keep in mind, you can run the current rule sequenced together with others in the test configuration to test how it plays with other rules.   test  is not saved with the other settings, but is only good for the current session.  # ----------------------------------------------------------------------------------------  # test: Here you can setup a test command.  This is not saved and is just used for this session.  #     - replacements ([str]): A list of regex rules to sequence together.  #     - find_only (bool): Highlight current find results and prompt for action.  #     - action (str): Apply the given action (fold|unfold|mark|unmark|select).  #       This overrides the default replace action.  #     - options (dict): optional parameters for actions (see documentation for more info).  #         - key (str): Unique name for highlighted region.  #         - scope (str - default= invalid ): Scope name to use as the color.  #         - style (str - default= outline ): Highlight style (solid|underline|outline).  #     - multi_pass (bool): Repeatedly sweep with sequence to find all instances.  #     - no_selection (bool): Overrides the  selection_only  setting and forces no selections.  #     - regex_full_file_with_selections (bool): Apply regex search to full file then apply  #       action to results under selections.    Depending on how the test command was configured, it may cause the panel to close, or you might accidentally close it by pressing  esc  or running some other command.  When closed, the currently opened rule is not lost and can be brought back by running the command palette command  RegReplace: Show Edit Panel  (the command will only work if the panel has been opened at least once).  You can also use the panel icon in the bottom left hand corner of the Sublime Text window (only on later versions of Sublime Text 3).", 
            "title": "A Better Way To Create Regex Rules"
        }, 
        {
            "location": "/usage/#view-without-replacing", 
            "text": "If you would simply like to view what the sequence would find without replacing, you can construct a command to highlight targets without replacing them (each pass could affect the end result, but this just shows all passes without predicting the replacements).  Just add the \"find_only\" argument and set it to true.       { \n         caption :   Reg Replace: Remove Trailing Spaces , \n         command :   reg_replace , \n         args :   { replacements :   [ remove_trailing_spaces ],   find_only :   true } \n     },   A prompt will appear allowing you to replace the highlighted regions.  Regions will be cleared on cancel.  If for any reason the highlights do not get cleared, you can simply run the \"RegReplace: Clear Highlights\" command from the command palette.  Highlight color and style can be changed in the settings file.", 
            "title": "View Without Replacing"
        }, 
        {
            "location": "/usage/#override-actions", 
            "text": "If instead of replacing you would like to do something else, you can override the action. Actions are defined in commands by setting the  action  parameter.  Some actions may require additional parameters be set in the  options  parameter.  See examples below.       { \n         caption :   Reg Replace: Fold HTML Comments , \n         command :   reg_replace , \n         args :   { replacements :   [ remove_html_comments ],   action :   fold } \n     }, \n     { \n         caption :   Reg Replace: Unfold HTML Comments , \n         command :   reg_replace , \n         args :   { replacements :   [ remove_html_comments ],   action :   unfold } \n     }, \n     { \n         caption :   Reg Replace: Mark Example , \n         command :   reg_replace , \n         args :   { \n             replacements :   [ example ], \n             action :   mark , \n             options :   { key :   name ,   scope :   invalid ,   style :   underline } \n         } \n     }, \n     { \n         caption :   Reg Replace: Unmark Example , \n         command :   reg_replace , \n         args :   { \n             action :   unmark , \n             options :   { key :   name } \n         } \n     },", 
            "title": "Override Actions"
        }, 
        {
            "location": "/usage/#supported-override-actions", 
            "text": "fold  unfold  mark  unmark  select", 
            "title": "Supported override actions"
        }, 
        {
            "location": "/usage/#fold-override", 
            "text": "action :   fold   This action folds the given find target.  This action has no parameters.", 
            "title": "Fold Override"
        }, 
        {
            "location": "/usage/#unfold-override", 
            "text": "action :   unfold   This action unfolds the all regions that match the given find target.  This action has no parameters", 
            "title": "Unfold Override"
        }, 
        {
            "location": "/usage/#mark-override", 
            "text": "action :   mark   This action highlights the regions of the given find target.", 
            "title": "Mark Override"
        }, 
        {
            "location": "/usage/#mark-options", 
            "text": "Action options are specified with the  options  key.", 
            "title": "Mark Options"
        }, 
        {
            "location": "/usage/#required-parameters", 
            "text": "options :   { key :   name }   Unique name for highlighted regions.", 
            "title": "Required Parameters"
        }, 
        {
            "location": "/usage/#optional-parameters", 
            "text": "options :   { scope :   invalid }   Scope name to use as the color. Default is  invalid .  options :   { style :   outline }   Highlight style (solid|underline|outline). Default is  outline .", 
            "title": "Optional Parameters"
        }, 
        {
            "location": "/usage/#unmark-override", 
            "text": "action :   unmark   This action removes the highlights of a given  key .  Replacements can be omitted with this command.", 
            "title": "Unmark Override"
        }, 
        {
            "location": "/usage/#unmark-options", 
            "text": "Action options are specified with the  options  key.", 
            "title": "Unmark Options"
        }, 
        {
            "location": "/usage/#required-parameters_1", 
            "text": "options :   { key :   name }   unique name of highlighted regions to clear", 
            "title": "Required Parameters"
        }, 
        {
            "location": "/usage/#select-override", 
            "text": "action :   select   This action selects the regions of the given find target.", 
            "title": "Select Override"
        }, 
        {
            "location": "/usage/#multi-pass", 
            "text": "Sometimes a regular expression cannot be made to find all instances in one pass.  In this case, you can use the multi-pass option.  This option will cause the entire sequence to repeatedly executed until all instances are found and replaced.  To protect against a poorly constructed multi-pass regular expression looping forever, there is a default max sweep threshold that will cause the sequence to kick out if it is reached.  This threshold can be tweaked in the settings file.  Multi-pass is used in replaces and cannot be paired with override actions (it will be ignored), but it can be paired with  find_only  as  find_only  allows you to initiate a replace.       { \n         caption :   Reg Replace: Remove Trailing Spaces , \n         command :   reg_replace , \n         args :   { replacements :   [ example ],   multi_pass :   true } \n     },", 
            "title": "Multi-Pass"
        }, 
        {
            "location": "/usage/#replace-only-under-selections", 
            "text": "Sometimes you only want to search under selections.  This can be done by enabling the  selection_only  setting in the settings file.  By enabling this setting, regular expression targets will be limited to the current selection if and only if a selection exists.  Auto replace/highlight on save events ignore this setting.  If you have a command that you wish to ignore this setting, just set the  no_selection  argument to  true .  Highlight style will be forced to underline selections if  find_only  is set to ensure they will show up.       // Ignore  selection_only  setting \n     { \n         caption :   Reg Replace: Remove Trailing Spaces , \n         command :   reg_replace , \n         args :   { replacements :   [ example ],   multi_pass :   true ,   no_selection :   true } \n     },", 
            "title": "Replace Only Under Selection(s)"
        }, 
        {
            "location": "/usage/#use-regular-expressions-on-entire-file-buffer-when-using-selections", 
            "text": "When  selection_only  is enabled, you might have a regular expression chain that lends itself better to performing the regular expression on the entire file buffer and then pick the matches under the selections as opposed to the default behavior of applying the regular expression directly to the selection buffer.  To do this, you can use the option  regex_full_file_with_selections .       { \n         caption :   Remove: All Comments , \n         command :   reg_replace , \n         args :   { \n             replacements :   [ \n                 remove_comments ,   remove_trailing_spaces , \n                 remove_excessive_newlines ,   ensure_newline_at_file_end \n             ], \n             find_only :   true , \n             regex_full_file_with_selections :   true \n         } \n     },", 
            "title": "Use Regular Expressions on Entire File Buffer when Using Selections"
        }, 
        {
            "location": "/usage/#apply-regular-expressions-right-before-file-save-event", 
            "text": "If you want to automatically apply a sequence right before a file saves, you can define sequences in the  reg_replace.sublime-settings  file.  Each \"on save\" sequence will be applied to the files you specify by file patterns or file regular expression.  Also, you must have  on_save  set to  true .  You can also just highlight, fold, or unfold by regular expression by adding the  action :  mark  key/value pair (supported options are  mark ,  fold , and  unfold ). Both types can be used at the same time. Actions are performed after replacements.  Example:       // If on_save is true, RegReplace will search through the file patterns listed below right before a file is saved, \n     // if the file name matches a file pattern, the sequence will be applied before the file is saved. \n     // RegReplace will apply all sequences that apply to a given file in the order they appear below. \n     on_save :   true , \n\n     // Highlight visual settings \n     on_save_highlight_scope :   invalid , \n     on_save_highlight_style :   outline , \n\n     on_save_sequences :   [ \n         // An example on_save event that removes dangling commas from json files \n         // - file_regex: an array of regex strings that must match the file for the sequence to be applied \n         // - case: regex case sensitivity (true|false) false is default (this setting is optional) \n         //   See https://docs.python.org/3.4/library/re.html for more information on Python s re. \n         // - file_pattern: an array of file patterns that must match for the sequence to be applied \n         // - sequence: an array of replacement definitions to be applied on saving the file \n         // - multi_pass: perform multiple passes on file to catch all regex instances \n         { \n             file_regex :   [ (?i).*\\\\.sublime-(settings|commands|menu|keymap|mousemap|theme|build|project|completions|commands) ], \n             file_pattern :   [ *.json ], \n             sequence :   [ remove_json_dangling_commas ] \n         }, \n         // An example on_save_sequence that targets all files and highlights trailing spaces \n         // - file_pattern: an array of file patterns that must match for the sequence to be applied \n         // - sequence: an array of replacement definitions to be applied on saving the file \n         // - action: (mark|fold|unfold) instead of replace \n         { \n             file_pattern :   [ * ], \n             sequence :   [ remove_trailing_spaces ], \n             action :   mark \n         } \n     ],", 
            "title": "Apply Regular Expressions Right Before File Save Event"
        }, 
        {
            "location": "/usage/#custom-replace-plugins", 
            "text": "There are times that a simple regular expression and replace is not enough.  Since RegReplace uses Python's re regular expression engine, we can use python code to intercept the replace and do more complex things via a plugin.  Because this uses Python's re, this will only be applied when doing regular expression searches (not literal searches).  In this example we are going to search for dates with the form YYYYMMDD and increment them by one day.  Below is the regular expression rule; notice we have defined a plugin to replace.  Plugins are defined as if you were importing a module in python.  So in this example, we are loading it from the  User  package. You do not need an  __init__.py  file in  rr_modules  folder; it is recommended to not use one as Sublime shouldn't bother loading these files as RegReplace will load them when needed.  date_up :   { \n     find :   (?P year \\\\d{4})(?P month \\\\d{2})(?P day \\\\d{2}) , \n     plugin :   User.rr_modules.date_up \n     //  args : { some_plugin_arguments :  if_desired }   == optional plugin arguments  }   Next we can define the command that will utilize the regex rule:       { \n         caption :   Replace: Date Up , \n         command :   reg_replace , \n         args :   { replacements :   [ date_up ],   find_only :   true } \n     },   Lastly, we can provide the plugin.  RegReplace will load the plugin and look for a function called  replace .   replace  takes a python re match object, and any arguments you want to feed it.  Arguments are defined in the regular expression rule as shown above.  SHORT_MONTH   =   30  LONG_MONTH   =   31  FEB_MONTH   =   28  FEB_LEAP_MONTH   =   29  JAN   =   1  FEB   =   2  MAR   =   3  APR   =   4  MAY   =   5  JUN   =   6  JUL   =   7  AUG   =   8  SEP   =   9  OCT   =   10  NOV   =   11  DEC   =   12  def   is_leap_year ( year ): \n     return   (( year   %   4   ==   0 )   and   ( year   %   100   !=   0 ))   or   ( year   %   400   ==   0 )  def   days_in_months ( month ,   year ): \n     days   =   LONG_MONTH \n     if   month   ==   FEB : \n         days   =   FEB_LEAP_MONTH   if   is_leap_year ( year )   else   FEB_MONTH \n     elif   month   in   [ SEP ,   APR ,   JUN ,   NOV ]: \n         days   =   SHORT_MONTH \n     return   days  def   increment_by_day ( day ,   month ,   year ): \n     mdays   =   days_in_months ( month ,   year ) \n     if   day   ==   mdays : \n         day   =   1 \n         if   month   ==   DEC : \n             month   =   JAN \n             year   +=   1 \n         else : \n             month   +=   1 \n     else : \n         day   +=   1 \n\n     return   day ,   month ,   year  def   replace ( m ): \n     g   =   m . groupdict () \n     year   =   int ( g [ year ] . lstrip ( 0 )) \n     month   =   int ( g [ month ] . lstrip ( 0 )) \n     day   =   int ( g [ day ] . lstrip ( 0 )) \n\n     day ,   month ,   year   =   increment_by_day ( day ,   month ,   year ) \n\n     return   %04d%02d%02d   %   ( year ,   month ,   day )   Here is some text to test the example on:  # Test 1: 20140228\n# Test 2: 20141231\n# Test 3: 20140101  RegReplace comes with a very simple example you can test with found at  /Packages/RegReplace/rr_modules/example.py . Since package control zips packages, it is hard to view directly without a plugin, so it is posted below as well. Import with  plugin :   RegReplace.rr_modules.example .  A simple example plugin.  def   replace ( m ,   ** kwargs ): \n     Replace with groups. \n\n     # pylint: disable=unused-argument \n     text   =   Here are your groups:  \n     for   group   in   m . groups (): \n         if   group   is   not   None : \n             text   +=   ( %s )   %   group \n     return   text", 
            "title": "Custom Replace Plugins"
        }, 
        {
            "location": "/usage/#regex-module", 
            "text": "By default, RegReplace uses Python's  re  module.  But if you prefer the \nmore advanced  regex  regular expression module, you can enable it with the \nfollowing setting:       // Use the regex module for regular expression. \n     // https://pypi.python.org/pypi/regex \n     use_regex_module :   true ,   To select whether to use Version 0 or Version 1 of the regex module, simply change the following setting:       // When  use_regex_module  is enabled, select which version of the regex module to use (0 or 1). \n     // See documentation to understand the differences: https://pypi.python.org/pypi/regex. \n     regex_module_version :   0 ,", 
            "title": "Regex Module"
        }, 
        {
            "location": "/usage/#extended-back-references", 
            "text": "RegReplace uses a special wrapper around Python's re library called backrefs.  Backrefs was written specifically for RegReplace and adds various additional backrefs that are known to some regular expression engines, but not to Python's re.  Backrefs adds:  \\p ,  \\P ,  \\u ,  \\U ,  \\l ,  \\L ,  \\Q  or  \\E  (though  \\u  and  \\U  are replaced with  \\c  and  \\C ).  It even \nadds some of the Posix style classes such as  [:ascii:]  etc.  Backrefs also works with the regex module, but it enables a smaller portion of back references as the regex module implements a few of the back references already (in one form or the other).  For instance, there was no need to add \nUnicode properties as it was already available. And since you can already use Unicode and/or Posix properties to do \nuppercase and lowercase character classes in search patterns, and regex already reserves  \\L , it wasn't worth the \nextra work to try and add equivalents for  \\c ,  \\C , 'l' and  \\L  to the search back references.  You can enable extended back references in the settings file:       // Use extended back references \n     extended_back_references :   true   When enabled, you can apply the back references to your search and/or replace patterns as you would other back references:       test_case :   { \n         find :   ([a-z])(?P somegroup [a-z]*)((?:_[a-z]+)+) , \n         replace :   \\\\c\\\\1\\\\L\\\\g somegroup \\\\E\\\\C\\\\g 3 \\\\E , \n         greedy :   true \n     }   You can read more about the backrefs' features in the  backrefs documentation .", 
            "title": "Extended Back References"
        }, 
        {
            "location": "/usage/#getting-the-latest-backrefs", 
            "text": "It is not always clear when Package Control updates dependencies.  So to force dependency updates, you can run Package Control's  Satisfy Dependencies  command which will update to the latest release.", 
            "title": "Getting the Latest Backrefs"
        }, 
        {
            "location": "/usage/#using-backrefs-in-regreplace-plugin", 
            "text": "You can import backrefs into a RegReplace plugin:  from   backrefs   as   bre   Or use bregex for the regex module with backrefs:  from   backrefs   as   bregex   Backrefs does provide a wrapper for all of re's normal functions such as  match ,  sub , etc., but is recommended to pre-compile your search patterns  and  your replace patterns for the best performance; especially if you plan on reusing the same pattern multiple times.  As re does cache a certain amount of the non-compiled calls you will be spared from some of the performance hit, but backrefs does not cache the pre-processing of search and replace patterns.  To use pre-compiled functions, you compile the search pattern with  compile_search .  If you want to take advantage of replace backrefs, you need to compile the replace pattern as well.  Notice the compiled pattern is fed into the replace pattern; you can feed the replace compiler the string representation of the search pattern as well, but the compiled pattern will be faster and is the recommended way.  pattern   =   bre . compile_search ( r somepattern ,   flags )  replace   =   bre . compile_replace ( pattern ,   r \\1 some replace pattern )   Then you can use the complied search pattern and replace  text   =   pattern . sub ( replace ,   r sometext )   or  m   =   pattern . match ( r sometext )  if   m : \n     text   =   replace ( m )    # similar to m.expand(template)   To use the non-compiled search/replace functions, you call them just them as you would in re; the names are the same.  Methods like  sub  and  subn  will compile the replace pattern on the fly if given a string.  for   m   in   bre . finditer ( r somepattern ,   some text ,   bre . UNICODE   |   bre . DOTALL ): \n     # do something   If you want to replace without compiling, you can use the  expand  method.  m   =   bre . match ( r sometext )  if   m : \n     text   =   bre . expand ( m ,   r replace pattern )", 
            "title": "Using Backrefs in RegReplace Plugin"
        }, 
        {
            "location": "/contributing/", 
            "text": "Contributing \n Support\n\ue157\n\n\nOverview\n\ue157\n\n\n\n\n\n\n\n\nSublime Versions\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nST2\n=\nversion\nST3\n\n\nSupported on a separate branch, but not actively.  Any further fixes or enhancements must come from the community.  Issues for versions less than \nST3\n will not be addressed moving forward by me.  Pull requests are welcome for back-porting features, enhancements, or fixes to the old branch, but the content of the pull \nmust\n already exist on the main, actively developed branch.  I will not allow an older branch to exceed the main branch in regards to functionality.\n\n\n\n\n\n\nST3\n\n\nFully supported and actively maintained.\n\n\n\n\n\n\n\n\nContribution from the community is encouraged and can be done in a variety of ways:\n\n\n\n\nBug reports.\n\n\nReviewing code.\n\n\nCode patches via pull requests.\n\n\nDocumentation improvements via pull requests.\n\n\n\n\nBug Reports\n\ue157\n\n\n\n\n\n\nPlease \nread the documentation\n and \nsearch the issue tracker\n to try to find the answer to your question \nbefore\n posting an issue.\n\n\n\n\n\n\nWhen an issue is created, a \ntemplate\n will be shown, please fill out the appropriate sections. If the template is not followed, the issue will be marked \nInvalid\n and closed.\n\n\n\n\n\n\nWhen creating an issue on the repository, please provide as much info as possible:\n\n\n\n\nProvide environment information by running \nPreferences-\nPackage Settings-\nRegReplace-\nSupport Info\n.  The information will be copied to the clipboard; paste the info in issue.\n\n\nErrors in console.\n\n\nDetailed description of the problem.\n\n\nExamples for reproducing the error.  You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste.\n\n\n\n\nThe more info provided, the greater the chance someone will take the time to answer, implement, or fix the issue.\n\n\n\n\n\n\nBe prepared to answer questions and provide additional information if required.  Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.\n\n\n\n\n\n\nReviewing Code\n\ue157\n\n\nTake part in reviewing pull requests and/or reviewing direct commits.  Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.\n\n\nPull Requests\n\ue157\n\n\nPull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of.\n\n\nContinuous integration tests on are run on all pull requests and commits via Travis CI.  When making a pull request, the tests will automatically be run, and the request must pass to be accepted.  You can (and should) run these tests before pull requesting.  If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.\n\n\nFeel free to use a virtual environment if you are concerned about installing any of the Python packages.  In the future, I may use tox, but as I currently only test on Python 3.3, I wanted to keep things simple.\n\n\nRunning Validation Tests\n\ue157\n\n\n\n\nTip\n\n\nIf you are running Sublime on a OSX or Linux/Unix system, you run all tests by by running the shell script (assuming you have installed your environment fulfills all requirements below):\n\n\nchmod +x run_tests.sh\n./run_tests.sh\n\n\n\n\n\n\nThere are a couple of dependencies that must be present before running the tests.\n\n\n\n\n\n\nAs \nST3\n is the only current, actively supported version, Python 3.3 must be used to validate the tests.\n\n\n\n\n\n\nUnit tests are run with \npytest\n.  You can install pytest via:\n\n\npip install pytest\n\n\n\n\nThe tests should be run from the root folder of the plugin by using the following command:\n\n\npy.test .\n\n\n\n\n\n\n\n\nLinting is performed on the entire project with \nflake8\n, \nflake8-docstrings\n, and \npep8-naming\n.  These can be installed via:\n\n\npip install flake8\npip install flake8-docstrings\npip install pep8-naming\n\n\n\n\nLinting is performed with the following command:\n\n\nflake8 .\n\n\n\n\n\n\n\n\nDocumentation Improvements\n\ue157\n\n\nA ton of time has been spent not only creating and supporting this plugin, but also spent making this documentation.  If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation.  Help with documentation is always appreciated and can be done via pull requests.  There shouldn't be any need to run validation tests if only updating documentation.\n\n\nYou don't have to render the docs locally before pull requesting, but if you wish to, I currently use a combination of \nmkdocs\n with my own custom Python Markdown \nextensions\n to render the docs.  You can preview the docs if you install these two packages.  The command for previewing the docs is \nmkdocs serve\n from the root directory.", 
            "title": "Contributing &amp; Support"
        }, 
        {
            "location": "/contributing/#contributing--support", 
            "text": "", 
            "title": "Contributing &amp; Support"
        }, 
        {
            "location": "/contributing/#overview", 
            "text": "Sublime Versions  Description      ST2 = version ST3  Supported on a separate branch, but not actively.  Any further fixes or enhancements must come from the community.  Issues for versions less than  ST3  will not be addressed moving forward by me.  Pull requests are welcome for back-porting features, enhancements, or fixes to the old branch, but the content of the pull  must  already exist on the main, actively developed branch.  I will not allow an older branch to exceed the main branch in regards to functionality.    ST3  Fully supported and actively maintained.     Contribution from the community is encouraged and can be done in a variety of ways:   Bug reports.  Reviewing code.  Code patches via pull requests.  Documentation improvements via pull requests.", 
            "title": "Overview"
        }, 
        {
            "location": "/contributing/#bug-reports", 
            "text": "Please  read the documentation  and  search the issue tracker  to try to find the answer to your question  before  posting an issue.    When an issue is created, a  template  will be shown, please fill out the appropriate sections. If the template is not followed, the issue will be marked  Invalid  and closed.    When creating an issue on the repository, please provide as much info as possible:   Provide environment information by running  Preferences- Package Settings- RegReplace- Support Info .  The information will be copied to the clipboard; paste the info in issue.  Errors in console.  Detailed description of the problem.  Examples for reproducing the error.  You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste.   The more info provided, the greater the chance someone will take the time to answer, implement, or fix the issue.    Be prepared to answer questions and provide additional information if required.  Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.", 
            "title": "Bug Reports"
        }, 
        {
            "location": "/contributing/#reviewing-code", 
            "text": "Take part in reviewing pull requests and/or reviewing direct commits.  Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.", 
            "title": "Reviewing Code"
        }, 
        {
            "location": "/contributing/#pull-requests", 
            "text": "Pull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of.  Continuous integration tests on are run on all pull requests and commits via Travis CI.  When making a pull request, the tests will automatically be run, and the request must pass to be accepted.  You can (and should) run these tests before pull requesting.  If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.  Feel free to use a virtual environment if you are concerned about installing any of the Python packages.  In the future, I may use tox, but as I currently only test on Python 3.3, I wanted to keep things simple.", 
            "title": "Pull Requests"
        }, 
        {
            "location": "/contributing/#running-validation-tests", 
            "text": "Tip  If you are running Sublime on a OSX or Linux/Unix system, you run all tests by by running the shell script (assuming you have installed your environment fulfills all requirements below):  chmod +x run_tests.sh\n./run_tests.sh   There are a couple of dependencies that must be present before running the tests.    As  ST3  is the only current, actively supported version, Python 3.3 must be used to validate the tests.    Unit tests are run with  pytest .  You can install pytest via:  pip install pytest  The tests should be run from the root folder of the plugin by using the following command:  py.test .    Linting is performed on the entire project with  flake8 ,  flake8-docstrings , and  pep8-naming .  These can be installed via:  pip install flake8\npip install flake8-docstrings\npip install pep8-naming  Linting is performed with the following command:  flake8 .", 
            "title": "Running Validation Tests"
        }, 
        {
            "location": "/contributing/#documentation-improvements", 
            "text": "A ton of time has been spent not only creating and supporting this plugin, but also spent making this documentation.  If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation.  Help with documentation is always appreciated and can be done via pull requests.  There shouldn't be any need to run validation tests if only updating documentation.  You don't have to render the docs locally before pull requesting, but if you wish to, I currently use a combination of  mkdocs  with my own custom Python Markdown  extensions  to render the docs.  You can preview the docs if you install these two packages.  The command for previewing the docs is  mkdocs serve  from the root directory.", 
            "title": "Documentation Improvements"
        }, 
        {
            "location": "/license/", 
            "text": "License\n\ue157\n\n\nRegReplace is released under the MIT license.\n\n\nCopyright \n 2011 - 2017 Isaac Muse \n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", 
            "title": "License"
        }, 
        {
            "location": "/license/#license", 
            "text": "RegReplace is released under the MIT license.  Copyright   2011 - 2017 Isaac Muse   Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", 
            "title": "License"
        }
    ]
}